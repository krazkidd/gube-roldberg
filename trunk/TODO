This file records TODOs that have to do with the big picture, the general
direction of the project. There are some more TODOs in the code.

* allow adding gravitational points or objects
* allow giving parts initial velocity vectors
  - be able to select a group of parts at a single time
* randomly select the first part to update so that some behaviors get averaged out. 
* make all parts Updateable and get rid of instanceof? (I think the performance
	hit would be greater than the gain.)
* need to pass air density to physics engine for air resistance calcs.
* need collision detection for ovals (the balloon)
* how to take advantage of multiple cores? (is there a library?)
* rename Updateable -> Mobile (or Moveable)
* need to add status panel so messages show
* customizeable mouse/keys
* remove printStackTrace's. give better error messages
* is the Factory pattern very useful [in PartFactory]? or is there a better way to implement it
	than a switch block?
* need some kind of table for friction coefficients, since they depend upon the
	surface materials
* highlight collisions mode
* future optimization? split screen up into chunks and only check objects in each chunk. 
	This could lead to problems with fast-moving objects. And the chunk-divisioning process
	may have too much overhead unless there are a *lot* of objects
* special perfectly inelastic collision case? (slime ball) Does it need to be special 
	or does the engine account for this well enough already?
* resting objects need to have zero velocity...(otherwise extra energy is appearing in the system)
* NaN happens very often w/ baseballs and slimeballs. i think they overlap the same type
	at some point and this causes a division by zero. (NaN also happens w/ basketballs and bowling balls)
	- this is happening much less now for some reason...
	- this is happening again; it occurs when there are Polygons (Circle-Polygon) collisions
* fix circleWithRectangle collision (balls and corners don't work correctly)
* share user-created parts: the parts just need to define a (convex) shape! and any
	special physics and colors
* use shear transform for underwater effects

DONE allow restore + temp save? that is: parts are placed, game is run, results are positive, restore to before run, 
	then temp save
DONE thought of making CollisionResult static...but what if we want to do parallel threads?
DONE ramp collision detection when placing part is not working
WHATISTHIS move update implementation to Updateable? (Save update for special things, no need
	to implement kinematics equations for each Updateable)...(interfaces can't implement
	methods)
DONE fix model space and world space
DONE add 'save parts' button so reset doesn't go all the way back to first run
DONE change gravity...(i think i made the change in the Part's update method)
	- use vector for location of grav. source (magnitude for strength? this would
		require some calculation before calling update())
DONE need to zoom in on world
DONE huge bug: basketballs + bowling balls = devious fun
DONE all collisions should be inelastic since all the objects are macroscopic
DONE ball-ball collisions need friction!! (they bounce forever otherwise)
DONE give each part a debug color